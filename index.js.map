{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nconst NodeConsole = require('console').Console;\nconst process = require('process');\n\n/**\n * Wrapper around node console that add return values.\n */\nexport class Console {\n    constructor(stdOut, stdErr) {\n        this._inner = new NodeConsole(stdOut, stdErr);\n    }\n\n    _loggingProxy(methodName, args) {\n        this._inner[methodName].apply(this._inner, args);\n        return args[args.length - 1];\n    }\n\n    // Wrapped calls\n    log(/*...*/) {\n        return this._loggingProxy('log', arguments);\n    }\n\n    info(/*...*/) {\n        return this._loggingProxy('info', arguments);\n    }\n\n    warn(/*...*/) {\n        return this._loggingProxy('warn', arguments);\n    }\n\n    error(/*...*/) {\n        return this._loggingProxy('error', arguments);\n    }\n\n    dir(obj, options) {\n        this._inner.dir(obj, options);\n        return obj;\n    }\n    \n    assert(value /*, ...*/) {\n        this._inner.assert.apply(this._inner, arguments);\n        return value;\n    }\n    \n    // Pass throughs\n    time(label) {\n        this._inner.time(label);\n    }\n\n    timeEnd(label) {\n        this._inner.timeEnd(label);\n    }\n\n    trace(/*...*/) {\n        this._inner.trace.apply(this._inner, arguments);\n    }\n}\n\n/**\n * Global console used for `console.log` APIs\n */\nconst globalConsole = new Console(process.stdout, process.stderr);\n\nexport const log = globalConsole.log.bind(globalConsole);\nexport const info = globalConsole.info.bind(globalConsole);\nexport const warn = globalConsole.warn.bind(globalConsole);\nexport const error = globalConsole.error.bind(globalConsole);\n\nexport const dir = globalConsole.dir.bind(globalConsole);\nexport const assert = globalConsole.assert.bind(globalConsole);\n\nexport const time = globalConsole.time.bind(globalConsole);\nexport const timeEnd = globalConsole.timeEnd.bind(globalConsole);\nexport const trace = globalConsole.timeEnd.bind(globalConsole);\n"],"sourceRoot":"/source/"}