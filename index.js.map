{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AACb,IAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;AAC/C,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;;;;;AAAC;IAKtB,OAAO,WAAP,OAAO;AAChB,aADS,OAAO,CACJ,MAAM,EAAE,MAAM,EAAE;8BADnB,OAAO;;AAEZ,YAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACjD;;iBAHQ,OAAO;;sCAKF,UAAU,EAAE,IAAI,EAAE;AAC5B,gBAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACjD,mBAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAChC;;;8BAEK;AACF,mBAAO,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC/C;;;+BAEM;AACH,mBAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAChD;;;+BAEM;AACH,mBAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAChD;;;gCAEO;AACJ,mBAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACjD;;;WAxBQ,OAAO;;;;;;;AA8BpB,IAAM,aAAa,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3D,IAAM,GAAG,WAAH,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClD,IAAM,IAAI,WAAJ,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpD,IAAM,KAAK,WAAL,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACtD,IAAM,IAAI,WAAJ,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC","file":"index.js","sourcesContent":["\"use strict\";\nconst NodeConsole = require('console').Console;\nconst process = require('process');\n\n/**\n * Wrapper around node console.\n */\nexport class Console {\n    constructor(stdOut, stdErr) {\n        this._inner = new NodeConsole(stdOut, stdErr);\n    }\n\n    _loggingProxy(methodName, args) {\n        this._inner[methodName].apply(this._inner, args);\n        return args[args.length - 1];\n    }\n\n    log() {\n        return this._loggingProxy('log', arguments);\n    }\n\n    info() {\n        return this._loggingProxy('info', arguments);\n    }\n\n    warn() {\n        return this._loggingProxy('warn', arguments);\n    }\n\n    error() {\n        return this._loggingProxy('error', arguments);\n    }\n}\n\n/**\n * Global console used for `console.log` style APIs\n */\nconst globalConsole = new Console(process.stdout, process.stderr);\n\nexport const log = globalConsole.log.bind(globalConsole);\nexport const info = globalConsole.info.bind(globalConsole);\nexport const error = globalConsole.error.bind(globalConsole);\nexport const warn = globalConsole.warn.bind(globalConsole);"],"sourceRoot":"/source/"}